// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model MessengerUser {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations MessengerConversation[] @relation(fields: [conversationIds],references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages MessengerMessage[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts MessengerAccount[]
  messages MessengerMessage[]
}

model MessengerAccount {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   userId String @db.ObjectId
   type String
   provider String
   providerAccountId String
   refresh_token String? @db.String
   access_token String? @db.String
   expires_at Int?
   token_type String?
   scope String?
   id_token String? @db.String
   session_state String?

  user MessengerUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model MessengerConversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  messagesIds String[] @db.ObjectId
  messages MessengerMessage[]
  userIds String[] @db.ObjectId
  users MessengerUser[] @relation(fields: [userIds], references: [id])
}

model MessengerMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen MessengerUser[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation MessengerConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender MessengerUser @relation(fields: [senderId], references: [id], onDelete: Cascade)
}